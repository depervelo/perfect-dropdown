{
	"compilerOptions": {
		"target": "es5" /* ECMAScript 목표 버전 설정: 'ES3'(기본), 'ES5', 'ES2015', 'ES2016', 'ES2017','ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */,
		"module": "esnext" /* 생성될 모듈 코드 설정: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */,
		"lib": ["dom", "dom.iterable", "esnext"] /* 컴파일 과정에 사용될 라이브러리 파일 설정 */,
		"allowJs": true /* JavaScript 파일 컴파일 허용, JS파일들 TS에서 import해서 쓸 수 있게 해줌 */,
		"sourceMap": true /* 소스맵 '.map' 파일 생성 설정 */,
		"noEmit": true /* 출력 방출(emit) 유무 설정 */,
		"isolatedModules": true /* 각 파일을 별도 모듈로 변환 ('ts.transpileModule'과 유사) */,
		"resolveJsonModule": true /* 정적으로 json가져오기 */,
		"strict": true /* 모든 엄격한 유형 검사 옵션 활성화 */,
		"noImplicitAny": true /* 명시적이지 않은 'any' 유형으로 표현식 및 선언 사용 시 오류 발생 */,
		"strictNullChecks": true /* 엄격한 null 검사 사용 */,
		"moduleResolution": "node" /* 모듈 분석 방법 설정: 'node' (Node.js) 또는 'classic' (TypeScript pre-1.6). */,
		"allowSyntheticDefaultImports": true /* 기본 출력(default export)이 없는 모듈로부터 기본 호출을 허용 (이 코드는 단지 유형 검사만 수행) */,
		"esModuleInterop": true /* 모든 가져오기에 대한 네임스페이스 객체 생성을 통해 CommonJS와 ES 모듈 간의 상호 운용성을 제공. 'allowSyntheticDefaultImports' 암시 */,
		"skipLibCheck": true /* 선언 파일 유형 검사 스킵 */,
		"forceConsistentCasingInFileNames": true /* 동일한 파일에 대한 일관되지 않은 케이스 참조를 허용하지 않음 */
	},
	"include": ["src/**/*.ts"] /* 컴파일대상 포함 */,
	"exclude": ["node_modules"] /* 컴파일대상 제외 */
}
